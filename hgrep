#!/bin/bash


############################################################
# Help                                                     #
############################################################
Help()
{
   # Display Help
   echo
   echo "The order to use flags is as follows"
   echo
   echo "Syntax: scriptTemplate [hgrep (-l and/or -i) -s "pattern"]"
   echo "options:"
   echo 
   echo "-h     Display this help message"
   echo "-s     Pattern to search for"
   echo "-e     Multiple search entries (hgrep -e foo -e bar)"
   echo "-l     Toggle line numbers"
   echo "-i     Case-insensitive pattern search"
   echo "-H     Number of Header lines, Default is 1"
   echo
   echo "Examples:"
   echo
   echo "lsblk | hgrep -H 1 -lis nvme0n1"
   echo "hgrep -f /etc/hosts -H 5 -li -e "example.com" -e "acme.com" "
   echo 
   echo "Do not use header AND include first line in search results"
   echo "hgrep -f /etc/hosts -H 0 -s Loopback"
   echo "Specific Special character searches that need to be preceded by triple backslashes"
   echo "[\\][|]"
   echo "Search for literal \\ by using quadruple backslashes"
   echo "Other special character searches need to be preceded by single \\"
   echo
  
}

Help2()
{
   # Display Help
   echo
   echo "The order to use flags is as follows"
   echo
   echo "Syntax: scriptTemplate [hgrep (-l and/or -i) -s "pattern"]"
   echo "options:"
   echo
   echo "-h     Display this help message"
   echo "-s     Pattern to search for"
   echo "-e     Multiple search entries (hgrep -e foo -e bar)"
   echo "-l     Toggle line numbers"
   echo "-i     Case-insensitive pattern search"
   echo "-H     Number of Header lines, Default is 1"
   echo
   echo
   echo "Examples:"
   echo
   echo "lsblk | hgrep -H 1 -lis nvme0n1"
   echo
}

NoInput()
{
   # Display NoInput
   echo
   echo "Need to pass a file or command use -h for help"
}

lflag=false
iflag=false
sflag=false
eflag=false
Hflag=false
qflag=false
Fflag=false
entries=()
or=''
# If number of arguments is 0 Help message
# if (($# == 0))
# then
#    Help
# fi
while getopts "H:f:lis:lie:h" opt; do
	case $opt in			
		h) 	# display Help
            echo "Showing Help..."
				Help 
				exit;;
		H) 		headers=$OPTARG; Hflag=true; ;;
		l) 		line1=" i=1"; line2="\"\\033[31m\"i\":\"\"\\033[0m\","; line3=" \$0 ; i++"; lflag=true; ;;
		i) 		set="IGNORECASE=1;"; iflag=true;  ;;
		s) 		pattern=$OPTARG; printer="print"; no=""; sflag=true; ;;
		e) 		entries+=($OPTARG); eflag=true; printer="print";  ;;
		#F)    Fflag=true; ;;
      f)    myfile=$OPTARG; fflag=true; ;;
      \?) 	# Invalid option
            qflag=true
				echo "Error: Invalid option detected -$OPTARG"
				Help
				exit;;
		:)		echo "Option -$OPTARG requires an argument." >&2
				Help
				exit;;
	esac
done
shift $(( OPTIND + 0))

# echo "HERE HERE"
# echo $OPTIND

if (( OPTIND <= 2 ))
then
   echo "Not Enough arguments"
	echo
	Help
	exit
elif (( OPTIND > 2)) && [[ "$qflag" == true ]]
then
   echo "Error: Invalid option detected"
   Help
   exit
fi

if [[ "$sflag" == true ]] && [[ "$eflag" == true ]]
then
   echo "Invalid combination of arguments -s -e"
   Help
   exit
fi

if [[ "$Hflag" == true ]]
then
	re='^[0-9]+$'
	if [[ ! "$headers" =~ $re ]] || [[ "$headers" == "" ]]
	then
		echo "Not a Valid argument for -H need integer '0-9'"
		Help2
		exit
	fi
fi

if [[  "$Hflag" == false ]]
then
	headers=1
fi

# CHeck if passing in file name
if [[ "$fflag" == false ]]
then
# Check if stdin is empty otherwise awk will hang
   if [ ! -t 0 ]
   then
      # echo "stdin has data"
      : # no-op
   else
      NoInput
      exit
   fi
fi
# echo "${entries[@]}"
max="${#entries[@]}"
maxless=$(("$max" - 1)) 
# echo "$max"


for (( i=0; i < "$max"; i++ ))
do
   # echo "$i"
   if (( "$i" == "$maxless"  ))
   then
      entries[i]=(${entries[$i]})' '
      continue
   fi
   entries[i]=(${entries[$i]})'|'
done

# for entry in "${entries[@]}"
# do
#    echo "$entry"
#    if [[ "$entry" == "$last"  ]]
#    then
#       entry=\("$entry"\)
#       continue
#    fi
#    entry=("$entry")'|'
# done

# Strip parentheses with sed
entries2=$(echo "${entries[@]}" | sed "s/[()]//g")
#String Filtering
string="$entries2"
if [[ "$string" == "\\" ]] || [[ "$pattern" == "\\" ]]; then
   echo "does equal"
   echo "Search pattern cannot be double backlash"
   echo "Try four backslashes to search for literal backslashes"
   Help
   exit
fi


# echo "${entries[@]}"
# echo "$pattern"

# Strip quotes with sed
entries=$(echo "${entries[@]}" | sed "s/'/ /g")

# Strip quotes with sed
myfile=$(echo "${myfile}" | sed "s/'/ /g")


# strip empty space with sed
entries=$(echo "$entries" | sed "s/\s//g")
# escape special characters        //\//\\/
# entries=$(echo "$entries" | sed "s//\//\\/g")
# echo "HERE"
# echo "$entries"


if [[ "$sflag" == true ]] || [[ "$eflag" == true ]] && [[ ! "$pattern" == '' ]] || [[ ! "$entries" == '' ]]
then
   : # no-op
else
   echo "Search pattern cannot be empty use [hgrep -h] for help"
   exit
fi

# echo "${entries[@]}"

if [[ "$sflag" == true ]] || [[  "$eflag" == true ]]
then
   if [[ "$fflag" == true ]]
   then
	   awk 'FNR<='"$headers"'{print; next} BEGIN{IGNORECASE=0; '"$set"' '"$line1"' } gsub(/'"${entries//\//\\/}"''"${pattern//\//\\/}"'/, "\033[31m&\033[0m")  {'"$printer"' '"$line2"' '"$line3"'}' $myfile
   else
      awk 'FNR<='"$headers"'{print; next} BEGIN{IGNORECASE=0; '"$set"' '"$line1"' } gsub(/'"${entries//\//\\/}"''"${pattern//\//\\/}"'/, "\033[31m&\033[0m")  {'"$printer"' '"$line2"' '"$line3"'}'
   fi
else
	Help
	exit
fi

# Multiple Entries  (sadf)|(asdf)|(asd)