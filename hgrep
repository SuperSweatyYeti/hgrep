#!/bin/bash

# Help                                                     #
############################################################
Help()
{
   # Display Help
   echo "Usage: hgrep OPTIONS... [FILE] PATTERN(S)"
   echo "Search for PATTERN(S) in file or STDOUT"
   echo "Can search for multiple PATTERNS"
   echo 
   echo "The recommended order to use flags is as follows"
   echo "hgrep -H "0-9" -l -i -f myfile (-s or -e) PATTERN(S) "
   echo 
   echo "Options:"
   echo 
   echo "-h, --help              Display this help message"
   echo "-s, --search            Pattern to search for"
   echo "-e, --multi-search      Multiple search entries (hgrep -e foo -e bar)"
   echo "-l, --lines             Toggle line numbers that DO correspond to the line in file "
   echo "-c, --count-lines       Toggle line numbers that DO NOT correspond to line in file. Useful to quickly see number of matches or clearly distinguish seperate lines"
   echo "-v, --invert-match      Print lines that DO NOT include specified pattern(s)"
   echo "-i, --ignore-case       Case-insensitive pattern search"
   echo "-H, --headers           Number of Header lines, Default is 1"
   echo
   echo "Example syntax: hgrep -li -f /path/to/myfile -s "pattern" "                    
   echo "Example syntax: hgrep -H 2 -li -f /etc/hosts -e "example.com" -e "acme.com" "
   echo 
   echo "More Examples: "
   echo "lsblk | hgrep sda "
   echo "lsblk | hgrep -H 1 -lis nvme0n1"
   echo "hgrep -f /etc/hosts -H 5 -li -e "example.com" -e "acme.com" "
   echo 
   echo "Do not use header AND include first line in search results"
   echo "hgrep -f /etc/hosts -H 0 -s Loopback"
   echo 
   echo "Search through all files that begin with "temp" "
   echo "hgrep -f "/dir/subdir/temp*" -s pattern "
   echo 
}


NoInput()
{
   # Display NoInput
   echo
   echo "Need to pass a file or command use "hgrep -h" for help"
   echo
}

tooMany()
{
   echo 'Invalid combination of options --   '
   echo "Type "hgrep -h" for help"
   echo
}

tooManySearch()
{
   echo "Can only search for a single pattern unless "-e or --multi-search" is specified"
   echo "Type "hgrep -h" for help"
   echo
}

lflag=false
cflag=false
iflag=false
vflag=false
sflag=false
eflag=false
hflag=false
Hflag=false
qflag=false
fflag=false
entries=()



# NOTE: This requires GNU getopt.  On Mac OS X and FreeBSD, you have to install this
# separately; see below.
TEMP=$(getopt -o hf:H:lcivs:e: --long invert-match,help,file:,headers:,lines,count-lines,ignore-case,search:,multi-search: \
              -n 'hgrep' -- "$@" )

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around '$TEMP': they are essential!
eval set -- "$TEMP"

while true; do
   case "$1" in
		-h | --help)            hflag=true ;# display help
                              Help ;
                              exit ;;
		-H | --headers)         headers="$2"; Hflag=true; shift 2 ;;
		-c | --count-lines)     cline1=" i=1"; cline2="\"\\033[93m\"i\":\"\"\\033[0m\",";
                              cline3=" \$0 ; i++"; cflag=true; shift ;;
      -l | --lines)           line1="\"\\033[96m\"FNR\":\"\"\\033[0m\",";
                              line2=" \$0" ; lflag=true ; shift ;;
      -v | --invert-match)    vflag=true; invert="!"; shift ;;
		-i | --ignore-case)     set="IGNORECASE=1;"; iflag=true; shift ;;
      -s | --search)          if [[ "$sflag" == false ]]; then
                                 sflag=true;
                              else
                                 tooMany;
                                 exit 1;
                              fi;
                              pattern="$2"; printer="print"; shift 2 ;;
		-e | --multi-search)    entries+=("$2"); eflag=true; printer="print"; shift 2 ;;
      -f | --file)            if [[ "$fflag" == false ]]; then
                                 myfile="$2";
                                 fflag=true;
                                 shift 2;
                              else
                                 tooMany;
                                 exit 1;
                              fi; ;;
      -- )                    shift; break ;;
      * )                     break ;;
	esac
done
echo "$1"
exit

# shift $(( OPTIND +0))
<<<<<<< HEAD
=======

>>>>>>> d471fa1 (modified Usage/help)
if (( OPTIND > 1))
then
echo "Invalid combination of options -- ($-) "
fi

# echo $OPTIND

# Either --search or --multi-search NOT both
if [[ "$sflag" == true && "$eflag" == true ]]
then
   tooMany
   exit 1
fi
# Either --lines or --count-lines NOT both
if [[ "$cflag" == true && "$lflag" == true ]]
then
   tooMany
   exit 1
fi

#Check if headers option is set
if [[ "$Hflag" == true ]]
then
   # Check if header argument is a positive numberical value
   re='^[0-9]+$'
	if [[ ! "$headers" =~ $re || "$headers" == "" ]]
	then
		echo "Not a valid argument for (-H | --headers)option, need positive integer '0-9'"
		Help
		exit 1
	fi
# Default number of headers is 1 if not specified
else
headers=1
fi


# Check if passing in a file name with -f option
if [[ "$fflag" == false ]]
then
# Check if stdin is empty otherwise awk will hang
   if [ ! -t 0 ]
   then
      # echo "stdin has data"
      : # no-op
   else
      NoInput
      exit 1
   fi
fi

# echo "${entries[@]}"
max="${#entries[@]}"
maxless=$(("$max" - 1)) 
# echo "$max"

# Loop through "entries" and add or operator "|" to each one except the last one
# so that we can add the entire new string to the awk search pattern section
for (( i=0; i < "$max"; i++ ))
do
   # echo "$i"
   if (( "$i" == "$maxless"  ))
   then
      entries[i]=(${entries[$i]})' '
      continue
   fi
   entries[i]=(${entries[$i]})'|'
done

# Check if used -s flag to specify search; If not then assume that the input after hgrep [OPTIONS] IS the search pattern
if [[ "$sflag" == true && "$pattern" != '' ]]  ||  [[ "$eflag" == true  && "$entries" != '' ]]
then
   : # no-op and continue
# Check that we don't have multiple search patterns seperated by spaces; $2 is the second input
elif [[ "$sflag" == false  &&  "$eflag" == false  && $2 == '' && "$pattern" == '' ]]
then
   # echo "assigning $1 to pattern"
   pattern=$1
   printer="print"
else
   tooManySearch
   exit 1
fi

# Strip parentheses with sed
entries2=$(echo "${entries[@]}" | sed "s/[()]//g")
#String Filtering
string="$entries2"
if [[ "$entries2" == "\\" || "$pattern" == "\\" ]]; then
   echo "Search pattern cannot be double backlash"
   echo "Try four backslashes to search for literal backslashes"
   Help
   exit 1
fi



# Strip quotes with sed
entries=$(echo "${entries[@]}" | sed "s/'/ /g")

# Strip quotes with sed
myfile=$(echo "${myfile}" | sed "s/'/ /g")

# strip empty space with sed
entries=$(echo "$entries" | sed "s/\s//g")




# Check for invert match and filename before defining awk command
if [[ "$vflag" == false ]]
then
   awk 'FNR<='"$headers"'{print; next} BEGIN{IGNORECASE=0; '"$set"' '"$cline1"' } gsub(/'"${entries//\//\\/}"''"${pattern//\//\\/}"'/, "\033[91m&\033[0m")  {'"$printer"' '"$line1"' '"$line2"' '"$cline2"' '"$cline3"'}' $myfile
elif [[ "$vflag" == true ]]
then
   awk 'FNR<='"$headers"'{print; next} BEGIN{IGNORECASE=0; '"$set"' '"$cline1"' } !/'"${entries//\//\\/}"''"${pattern//\//\\/}"'/  {'"$printer"' '"$line1"' '"$line2"' '"$cline2"' '"$cline3"'}' $myfile
fi


# Multiple Entries  (sadf)|(asdf)|(asd)
